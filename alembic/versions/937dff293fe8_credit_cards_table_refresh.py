"""Refreshed the credit cards table massively

Revision ID: 937dff293fe8
Revises: 0aa06cf04e62
Create Date: 2025-01-15 12:44:54.360054

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from database.creditcard.source import insert_update_sql, register_update_insert_trigger, create_credit_card_sql, register_create_credit_card_trigger

# revision identifiers, used by Alembic.
revision: str = '937dff293fe8'
down_revision: Union[str, None] = '0aa06cf04e62'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('credit_cards_source',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('issuer', sa.TEXT(), nullable=False),
    sa.Column('network', sa.TEXT(), nullable=False),
    sa.Column('key', sa.TEXT(), nullable=True),
    sa.Column('reference_links', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('source_last_verified', sa.DATE(), nullable=True),
    sa.Column('dump', sa.TEXT(), nullable=False),
    sa.Column('reward_category_map', sa.TEXT(), nullable=True),
    sa.Column('sign_on_bonus', sa.TEXT(), nullable=True),
    sa.Column('annual_fee', sa.TEXT(), nullable=True),
    sa.Column('statement_credit', sa.TEXT(), nullable=True),
    sa.Column('benefits', sa.TEXT(), nullable=True),
    sa.Column('apr', sa.TEXT(), nullable=True),
    sa.Column('credit_needed', sa.TEXT(), nullable=True),
    sa.Column('keywords', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('name', 'issuer', 'network'),
    sa.UniqueConstraint('key')
    )
    op.create_table('credit_cards_update',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('issuer', sa.TEXT(), nullable=False),
    sa.Column('network', sa.TEXT(), nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=True, nullable=True),
    sa.Column('field', postgresql.ENUM(
        'dump',
        'reward_category_map',
        'sign_on_bonus',
        'annual_fee',
        'statement_credit',
        'benefits',
        'apr',
        'credit_needed',
        'keywords',
        name='cc_attr_enum',
    ), nullable=False),
    sa.ForeignKeyConstraint(['name', 'issuer', 'network'], ['credit_cards_source.name', 'credit_cards_source.issuer', 'credit_cards_source.network'], ),
    sa.PrimaryKeyConstraint('name', 'issuer', 'network', 'field')
    )
    op.create_index(op.f('ix_credit_cards_update_priority'), 'credit_cards_update', ['priority'], unique=False)
    op.drop_table('cardratings_scrape')
    op.add_column('credit_cards', sa.Column('network', sa.TEXT(), nullable=False))
    op.add_column('credit_cards', sa.Column('key', sa.TEXT(), nullable=True))
    op.add_column('credit_cards', sa.Column('referral_link', sa.TEXT(), nullable=True))
    op.add_column('credit_cards', sa.Column('last_verified', sa.DATE(), nullable=True))
    op.add_column('credit_cards', sa.Column('user_feedback', postgresql.ARRAY(sa.TEXT()), nullable=False))
    op.alter_column('credit_cards', 'name',
               existing_type=sa.VARCHAR(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('credit_cards', 'issuer',
               existing_type=sa.VARCHAR(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('credit_cards', 'reward_category_map',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'primary_reward_unit',
               existing_type=sa.VARCHAR(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('credit_cards', 'sign_on_bonus',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'annual_fee',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'statement_credit',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'benefits',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'apr',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'credit_needed',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'keywords',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    
    # First drop the foreign key constraints from association tables
    op.drop_constraint('user_credit_card_association_credit_card_id_fkey', 'user_credit_card_association', type_='foreignkey')
    op.drop_constraint('wallet_new_card_association_credit_card_id_fkey', 'wallet_new_card_association', type_='foreignkey')

    # Then drop the primary key constraint from credit_cards and create the new one
    op.execute('ALTER TABLE credit_cards DROP CONSTRAINT credit_cards_pkey')
    op.create_primary_key(None, 'credit_cards', ['name', 'issuer', 'network'])

    # Now we can drop the id column since nothing depends on it
    op.drop_column('credit_cards', 'id')

    # Create the foreign key relationships to credit_cards_source
    op.create_foreign_key(None, 'credit_cards', 'credit_cards_source', ['name', 'issuer', 'network'], ['name', 'issuer', 'network'])
    op.create_foreign_key(None, 'credit_cards', 'credit_cards_source', ['key'], ['key'])

    # Add new columns to association tables
    op.add_column('user_credit_card_association', sa.Column('credit_card_name', sa.String(), nullable=False))
    op.add_column('user_credit_card_association', sa.Column('credit_card_issuer', sa.String(), nullable=False))
    op.add_column('user_credit_card_association', sa.Column('credit_card_network', sa.String(), nullable=False))

    op.add_column('wallet_new_card_association', sa.Column('credit_card_name', sa.String(), nullable=False))
    op.add_column('wallet_new_card_association', sa.Column('credit_card_issuer', sa.String(), nullable=False))
    op.add_column('wallet_new_card_association', sa.Column('credit_card_network', sa.String(), nullable=False))

    # Create new foreign key constraints for association tables
    op.create_foreign_key(None, 'user_credit_card_association', 'credit_cards', 
                         ['credit_card_name', 'credit_card_issuer', 'credit_card_network'],
                         ['name', 'issuer', 'network'], 
                         ondelete='CASCADE')
    op.create_foreign_key(None, 'wallet_new_card_association', 'credit_cards',
                         ['credit_card_name', 'credit_card_issuer', 'credit_card_network'],
                         ['name', 'issuer', 'network'],
                         ondelete='CASCADE')

    # Drop the old id columns from association tables
    op.drop_column('user_credit_card_association', 'credit_card_id')
    op.drop_column('wallet_new_card_association', 'credit_card_id')

    # Finally create the triggers
    op.execute(insert_update_sql)
    op.execute(register_update_insert_trigger)
    op.execute(create_credit_card_sql)
    op.execute(register_create_credit_card_trigger)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('wallet_new_card_association', sa.Column('credit_card_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'wallet_new_card_association', type_='foreignkey')
    op.create_foreign_key('wallet_new_card_association_credit_card_id_fkey', 'wallet_new_card_association', 'credit_cards', ['credit_card_id'], ['id'], ondelete='CASCADE')
    op.drop_column('wallet_new_card_association', 'credit_card_network')
    op.drop_column('wallet_new_card_association', 'credit_card_issuer')
    op.drop_column('wallet_new_card_association', 'credit_card_name')
    op.add_column('user_credit_card_association', sa.Column('credit_card_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_credit_card_association', type_='foreignkey')
    op.create_foreign_key('user_credit_card_association_credit_card_id_fkey', 'user_credit_card_association', 'credit_cards', ['credit_card_id'], ['id'], ondelete='CASCADE')
    op.drop_column('user_credit_card_association', 'credit_card_network')
    op.drop_column('user_credit_card_association', 'credit_card_issuer')
    op.drop_column('user_credit_card_association', 'credit_card_name')
    op.add_column('credit_cards', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('credit_cards_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'credit_cards', type_='foreignkey')
    op.drop_constraint(None, 'credit_cards', type_='foreignkey')
    op.alter_column('credit_cards', 'keywords',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'credit_needed',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'apr',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'benefits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'statement_credit',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'annual_fee',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'sign_on_bonus',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'primary_reward_unit',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('credit_cards', 'reward_category_map',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('credit_cards', 'issuer',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('credit_cards', 'name',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('credit_cards', 'user_feedback')
    op.drop_column('credit_cards', 'last_verified')
    op.drop_column('credit_cards', 'referral_link')
    op.drop_column('credit_cards', 'key')
    op.drop_column('credit_cards', 'network')
    op.create_table('cardratings_scrape',
    sa.Column('scrape_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('credit_cards_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unparsed_issuer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('unparsed_credit_needed', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('unparsed_card_attributes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['credit_cards_id'], ['credit_cards.id'], name='cardratings_scrape_credit_cards_id_fkey'),
    sa.PrimaryKeyConstraint('scrape_id', name='cardratings_scrape_pkey')
    )
    op.drop_index(op.f('ix_credit_cards_update_priority'), table_name='credit_cards_update')
    op.drop_table('credit_cards_update')
    op.drop_table('credit_cards_source')
    op.execute('DROP TRIGGER IF EXISTS credit_card_update_trigger ON credit_cards_source;')
    op.execute('DROP FUNCTION IF EXISTS notify_credit_card_update();')
    op.execute('DROP TRIGGER IF EXISTS credit_card_source_after_insert ON credit_cards_source;')
    op.execute('DROP FUNCTION IF EXISTS create_credit_card();')

